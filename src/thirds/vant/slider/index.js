"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var component_1 = require('./../common/component.js');
var touch_1 = require('./../mixins/touch.js');
component_1.VantComponent({
    mixins: [touch_1.touch],
    props: {
        disabled: Boolean,
        useButtonSlot: Boolean,
        activeColor: String,
        inactiveColor: String,
        max: {
            type: Number,
            value: 100
        },
        min: {
            type: Number,
            value: 0
        },
        step: {
            type: Number,
            value: 1
        },
        value: {
            type: Number,
            value: 0
        },
        barHeight: {
            type: String,
            value: '2px'
        }
    },
    watch: {
        value: function value(_value) {
            this.updateValue(_value, false);
        }
    },
    created: function created() {
        this.updateValue(this.data.value);
    },
    methods: {
        onTouchStart: function onTouchStart(event) {
            if (this.data.disabled) return;
            this.touchStart(event);
            this.startValue = this.format(this.data.value);
        },
        onTouchMove: function onTouchMove(event) {
            var _this = this;
            if (this.data.disabled) return;
            this.touchMove(event);
            this.getRect('.van-slider').then(function (rect) {
                var diff = _this.deltaX / rect.width * 100;
                _this.updateValue(_this.startValue + diff, false, true);
            });
        },
        onTouchEnd: function onTouchEnd() {
            if (this.data.disabled) return;
            this.updateValue(this.data.value, true);
        },
        onClick: function onClick(event) {
            var _this = this;
            if (this.data.disabled) return;
            this.getRect('.van-slider').then(function (rect) {
                var value = (event.detail.x - rect.left) / rect.width * 100;
                _this.updateValue(value, true);
            });
        },
        updateValue: function updateValue(value, end, drag) {
            value = this.format(value);
            this.set({
                value: value,
                barStyle: "width: " + value + "%; height: " + this.data.barHeight + ";"
            });
            if (drag) {
                this.$emit('drag', { value: value });
            }
            if (end) {
                this.$emit('change', value);
            }
        },
        format: function format(value) {
            var _a = this.data,
                max = _a.max,
                min = _a.min,
                step = _a.step;
            return Math.round(Math.max(min, Math.min(value, max)) / step) * step;
        }
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tcG9uZW50XzEiLCJyZXF1aXJlIiwidG91Y2hfMSIsIlZhbnRDb21wb25lbnQiLCJtaXhpbnMiLCJ0b3VjaCIsInByb3BzIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwidXNlQnV0dG9uU2xvdCIsImFjdGl2ZUNvbG9yIiwiU3RyaW5nIiwiaW5hY3RpdmVDb2xvciIsIm1heCIsInR5cGUiLCJOdW1iZXIiLCJtaW4iLCJzdGVwIiwiYmFySGVpZ2h0Iiwid2F0Y2giLCJ1cGRhdGVWYWx1ZSIsImNyZWF0ZWQiLCJkYXRhIiwibWV0aG9kcyIsIm9uVG91Y2hTdGFydCIsImV2ZW50IiwidG91Y2hTdGFydCIsInN0YXJ0VmFsdWUiLCJmb3JtYXQiLCJvblRvdWNoTW92ZSIsIl90aGlzIiwidG91Y2hNb3ZlIiwiZ2V0UmVjdCIsInRoZW4iLCJyZWN0IiwiZGlmZiIsImRlbHRhWCIsIndpZHRoIiwib25Ub3VjaEVuZCIsIm9uQ2xpY2siLCJkZXRhaWwiLCJ4IiwibGVmdCIsImVuZCIsImRyYWciLCJzZXQiLCJiYXJTdHlsZSIsIiRlbWl0IiwiX2EiLCJNYXRoIiwicm91bmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxjQUFjQyxRQUFRLHFCQUFSLENBQWxCO0FBQ0EsSUFBSUMsVUFBVUQsUUFBUSxpQkFBUixDQUFkO0FBQ0FELFlBQVlHLGFBQVosQ0FBMEI7QUFDdEJDLFlBQVEsQ0FBQ0YsUUFBUUcsS0FBVCxDQURjO0FBRXRCQyxXQUFPO0FBQ0hDLGtCQUFVQyxPQURQO0FBRUhDLHVCQUFlRCxPQUZaO0FBR0hFLHFCQUFhQyxNQUhWO0FBSUhDLHVCQUFlRCxNQUpaO0FBS0hFLGFBQUs7QUFDREMsa0JBQU1DLE1B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Q0k7QUE0Q0w2QixnQkFBUSxnQkFBVTdCLEtBQVYsRUFBaUI7QUFDckIsZ0JBQUlpRCxLQUFLLEtBQUsxQixJQUFkO0FBQUEsZ0JBQW9CVCxNQUFNbUMsR0FBR25DLEdBQTdCO0FBQUEsZ0JBQWtDRyxNQUFNZ0MsR0FBR2hDLEdBQTNDO0FBQUEsZ0JBQWdEQyxPQUFPK0IsR0FBRy9CLElBQTFEO0FBQ0EsbUJBQU9nQyxLQUFLQyxLQUFMLENBQVdELEtBQUtwQyxHQUFMLENBQVNHLEdBQVQsRUFBY2lDLEtBQUtqQyxHQUFMLENBQVNqQixLQUFULEVBQWdCYyxHQUFoQixDQUFkLElBQXNDSSxJQUFqRCxJQUF5REEsSUFBaEU7QUFDSDtBQS9DSTtBQXBDYSxDQUExQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbXBvbmVudF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21wb25lbnRcIik7XG52YXIgdG91Y2hfMSA9IHJlcXVpcmUoXCIuLi9taXhpbnMvdG91Y2hcIik7XG5jb21wb25lbnRfMS5WYW50Q29tcG9uZW50KHtcbiAgICBtaXhpbnM6IFt0b3VjaF8xLnRvdWNoXSxcbiAgICBwcm9wczoge1xuICAgICAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICAgICAgdXNlQnV0dG9uU2xvdDogQm9vbGVhbixcbiAgICAgICAgYWN0aXZlQ29sb3I6IFN0cmluZyxcbiAgICAgICAgaW5hY3RpdmVDb2xvcjogU3RyaW5nLFxuICAgICAgICBtYXg6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHZhbHVlOiAxMDBcbiAgICAgICAgfSxcbiAgICAgICAgbWluOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICB9LFxuICAgICAgICBzdGVwOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICB2YWx1ZTogMVxuICAgICAgICB9LFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgfSxcbiAgICAgICAgYmFySGVpZ2h0OiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICB2YWx1ZTogJzJweCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSh2YWx1ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodGhpcy5kYXRhLnZhbHVlKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuZGlzYWJsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy50b3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuZGF0YS52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMudG91Y2hNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVjdCgnLnZhbi1zbGlkZXInKS50aGVuKGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBfdGhpcy5kZWx0YVggLyByZWN0LndpZHRoICogMTAwO1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVZhbHVlKF90aGlzLnN0YXJ0VmFsdWUgKyBkaWZmLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ub3VjaEVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5kaXNhYmxlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMuZGF0YS52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuZGlzYWJsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5nZXRSZWN0KCcudmFuLXNsaWRlcicpLnRoZW4oZnVuY3Rpb24gKHJlY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAoZXZlbnQuZGV0YWlsLnggLSByZWN0LmxlZnQpIC8gcmVjdC53aWR0aCAqIDEwMDtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZW5kLCBkcmFnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgYmFyU3R5bGU6IFwid2lkdGg6IFwiICsgdmFsdWUgKyBcIiU7IGhlaWdodDogXCIgKyB0aGlzLmRhdGEuYmFySGVpZ2h0ICsgXCI7XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGRyYWcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdkcmFnJywgeyB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5kYXRhLCBtYXggPSBfYS5tYXgsIG1pbiA9IF9hLm1pbiwgc3RlcCA9IF9hLnN0ZXA7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbHVlLCBtYXgpKSAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIl19